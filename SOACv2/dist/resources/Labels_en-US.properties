#title
soac=SOAC - Organization and Computer Architecture Simulator
#menus
inserir=Insert
instrucoes=Instructions
variavel=Variable
mensagem=Message
conteudodefaultmensagem=There is no message
conteudodefaultvariaveis=There are no variables
variaveis=Variables
janela=Window
mensagens=Messages
exibir=Show
esconder=Hide
naoexibir=Not Show
exibirmenssimulacao=Show Simulation Messages
outros=Others
sied=SIED - Integrated Simulators of Data Structures
sin=SIN - Integrated Simulators of Operating Systems
ajuda=Help
guia=Guide
sobre=About
idioma=Language
portugues=Portuguese
ingles=English
questionarios=Questionnaires
avaliacaosoac=SOAC Evaluation
relatobugs=Bugs Report
questionarioavaliacaosoac=Questionnaire of SOAC Evaluation
relatobugssoac=Report of SOAC Bugs
sobretxt=The Organization and Computer Architecture Simulator (SOAC) is a simulation environment\nthat permits to the student ant the teacher the visualization of theoretical concepts involved\nin the execution of instructions in a computer.
#Window Guide
passo1=Step 1
passo2=Step 2
passo3=Step 3
passo4=Step 4
passo5=Step 5
passo6=Step 6
passo1txt=Click on the circle named "Computer". To know more details about any of\nthe components of this simulator, put the mouse over them in order that\nthem informations appear in the "Messages" tab. 
passo2txt=Click in all the circles that represent the components of the computer to\nreveal their internal components. You must to click on the circle named\n"Central Processing Unit" before to click in "Interconnection System".
passo3txt=After all the components expand, click on the circles named "Main\nMemory", "CPU" and "Bus, to obtain a more detailed vision of them.
passo4txt=Through the "Insert" menu, insert instructions and variables. Note that\nfor inserting instructions having operands with the direct or indirect\naddressing modes, it's necessary to insert a variable before. In the field\nvalue, inform the identifier of an inserted variable (you can see the\ninserted variables in the "Variables" tab). If you choose the options\n"Register" or "Indirect of Register" for one of the operands, inform in the\nfield value the identifier of one of the CPU registers (R1, R2, R3, or R4).
passo5txt=After insert all the desired instructions, click on the button "Start\nSimulation". Two new buttons will appear on the central low position of\nthe screen. Click on the button with the "Play" symbol to start the\nsimulation of the instructions execution. You can pause the animation in\nevery moment clicking on the same button (note that its symbol have\nchanged) and continue the animation clicking on the same. The second\nbutton with the "Stop" symbol serves to finalize the instructions\nexecution. If you click in this same button, the effects of the instructions\nexecuted will remain in the machine and for execute more instructions,\nyou will have to insert them.
passo6txt=During the animation, explanatory messages will be displayed for each of\nthe steps of the instructions execution. To go to the next step, read the\nmessage, click on the "Continue" button of its screen and after, click on\nthe "Play" button again. If you don't want to see these messages, click on\nthe button "Don't show messages" of a message screen or uncheck the\noption "Show Simulation Messages" by the menu Window -> Messages.
#circles
clique=\u0020\u0020\u0020\u0020Click to expand
computador=\u0020\u0020\u0020COMPUTER
es=Input/Output
memoriaprincipal=\u0020\u0020Main Memory
sistemainterconexao=Interconnection System
ucp=Central Processing\n            Unit
dados=Data
ucpabrev=CPU
registradores=Registers
ula=Arithmetic and\n Logic Unit
barramentoint=\u0020\u0020\u0020\u0020\u0020\u0020Internal Bus
uc=\u0020\u0020\u0020\u0020\u0020\u0020\u0020Control Unit
barramento=\u0020\u0020\u0020\u0020\u0020\u0020Bus
moduloes=\u0020\u0020\u0020I/O Module
legiveishumano=Human\n Readable
legiveismaquina=Machine\n Readable
comunicacaodisprem=\u0020\u0020\u0020Communication\n     with Remote\n        Devices
#Insert Instructions Window
erro=Error
aviso=Message
avisoidioma=The language change will only take effect after restarting
inseririnstrucoes=Insert Instructions
tipo=Type:
operando1=\u0020Operand 1
operando2=\u0020\u0020Operand 2
modoenderecamento=Addressing mode:\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020
valor=Value:
imediato=Immediate
direto=Direct
indireto=Indirect
registrador=Register
indiretoregistrador=Indirect of Register
inserirseta=Insert>>
removerselecionada=Remove Selected
iniciarsimulacao=Start Simulation
informeoperando1=Please, specify a value for the operand 1
informeoperando2=Please, specify a value for the operand 2
modoop1naopodeimediato=The addressing mode of the operand 1 cannot be immediate
valorvarop1naoexiste=The variable with the value specified for the operand 1 does not exist
valorvarop1ehponteiro=The variable with the value specified for the operand 1 is a pointer
valorvarop1naoehponteiro=The variable with the value specified for the operand 1 is not a pointer
registradorvalorop1naoexiste=The register with the value specified for the operand 1 does not exist
registradornaocontemendmemoria=The register specified does not contain a memory address
valorop2precisaserintoufloat=The value specified for the operand 2 needs to be an integer or floating point
valorvarop2naoexiste=The variable with the value specified for the operand 2 does not exist
valorvarop2ehponteiro=The variable with the value specified for the operand 2 is a pointer
valorvarop2naoehponteiro=The variable with the value specified for the operand 2 is not a pointer
registradorvalorop2naoexiste=The register with the value specified for the operand 2 does not exist
#Insert Variables Window
inserirvariavel=Insert Variable
identificador=Identifier [A-Z]:
inteiro=Integer
pontoflutuante=Floating point
valorinicial=Initial value (optional):
normal=Normal
ponteiro=Pointer
identificadorabrev=ID
enderecoabrev=ADDR
informeidentificador=Please, specify an identifier
informevalor=Please, specify a value
identificadorinvalido=is not a valid identifier
valornaoehinteiro=The value specified is not an integer number
valornaoehfloat=The value specified is not a floating point number
ponteirosoharmazenainteiros=A pointer can only store integer values
naohavariavelcomendereco=There is no variable with the specified address
ponteironaoreferenciaponteiro=It is not possible, in this simulator, a pointer referencing another pointer
#internal components
r=R
pc=PC
mar=MAR
mbr=MBR
ir=IR
ioar=I/O AR
iobr=I/O BR
ulaabrev=ALU
ucabrev=CU
endereco=Address
opcode=Opcode
instrucoesmin=instructions
enderecosmin=addresses
dadosmin=data
dado=Data
memoriaseminst=The Memory contains no instructions to be executed
memoriasemdados=The Memory contains no data
#explanatory messages
computadornaoxpandido=\u0020This circle represents a computer.\n Click in this circle to see its internal\n components and start the simulation.
computadorexpandido=\u0020This circle represents a computer with its main\n components represented by circles. To see details\n of each of them and start the simulation with them\n involved, click on the circle which represent them.
memoriaprincipaltxt=\u0020This circle represents a main memory.\n The main memory can store both instructions\n and data. To visualize the organization of the\n main memory with more details, click in this circle.
entradasaidatxt=\u0020This circle represents the input/output devices, which can be divided into three categories:\n 1 - Human readable: suitable for the communication with computer users. Examples: video monitors and printers.\n 2 - Machine readable: suitable for the communication with hardware equipments. Examples: magnetic disks, sensors and actuators.\n 3 - Communication: suitable for the communication with remote devices. Examples: terminal, network adapter and other computer.
ucptxt=\u0020This circle represents a CPU (Central Processing Unit).\n A CPU is constituted by registers, arithmetic and logic unit,\n internal bus and control unit. To see more details about\n each of these components, click with the mouse.
memoriainternatxt=\u0020The main memory is represented here by two tables:\n one that stores instructions and other that stores data.\n In the instructions table, the columns are the following: \n - Address: The memory address that the instruction occupies\n - Opcode: A code that identifies the type of the instruction,\n   related with the operands 1 and 2.\n - Operands 1 and 2: Numbers that identify the memory\n   address of a data, a data or one of the CPU registers,\n   depending of the addressing mode of these operands.\n Each line of the data table contains what the programmers\n define as variables. This table have two columns, in the first,\n the address of an inserted variable is contained and in the\n second, the data that this variable stores.
registradorestxt = \u0020The registers store data and references to the memory.\n The access time to the registers is much faster, if\n compared to the access time of the main memory.
pctxt = \u0020The PC (Program Counter) stores the value\n of the next instruction to be executed, for when\n a instruction finishes its execution, the CPU knows\n what will be the next instruction that it will have to\n execute.
martxt=\u0020The MAR (Memory Address Register) is responsible\n for storing the references of memory addresses that\n will be transferred to the addresses bus in a reading\n of a data or instruction of the main memory.
mbrtxt=\u0020The MBR (Memory Buffer Register) is responsible\n for storing the data that will be written in the main\n memory by the data bus and for receiving the data\n or memory instructions in a reading operation,\n through this same bus.
irtxt=\u0020The IR (Instruction Register) is responsible\n for storing the instructions that come from memory.
ulatxt=\u0020The ALU (Arithmetic and Logic Unit) is the\n responsible for executing the logical and arithmetic\n operations, such as additions, subtractions,\n multiplications and divisions.
uctxt=\u0020The CU (Control Unit) coordinates the CPU\n activities. It sends the instructions of reading\n data or instructions of writing data to the\n instructions bus. Moreover, it is responsible\n for sending instructions that will realize internal\n operations in the CPU, as updating the PC,\n realizing arithmetic operations and transferring\n data between components of the CPU by\n its internal bus.
barramentotxt=\u0020This component is part of the interconnection\n system. To see more details about one of these\n components, click on the circle \"Bus\" or \"I/O Module\".
barramentointernotxt=\u0020The bus is where the data or instructions\n of the main memory flow to the CPU or vice\n versa. It is constituted by three sub-buses:\n the instructions bus, the addresses bus and\n the data bus where flow CU instructions,\n memory addresses and data, respectively.
#messages of the search cycle
continuar=Continue
naomostrarmensagens=Don't show messages
atualizarpctxt=\u0020The search cycle will start now, to search the next\n instruction in the memory. The PC value is updated\n with the instruction address that will be executed\n in the next.
movermartxt =\u0020The PC value is then transferred to the MAR, which\n contain the addresses that will be transferred from\n the bus to the memory and that comes from memory\n through the bus.
compiareadbarramentotxt=\u0020The control unit is responsible for coordinating\n the CPU activities. In this case, it sends the \"READ\"\n command to the bus, meaning that the CPU is\n requiring a data reading from memory.
copiarvalormarbarramentotxt = \u0020As well as the command \"READ\", the MAR value,\n that contains the address of the next instruction,\n is also transferred to the bus.
moverdadosbarramentomemoriatxt= \u0020These two values will be transferred to the memory,\n through the bus. The MAR value in the addresses bus\n and the \"READ\" command in the instructions bus.
transferirinstrucaotxt=\u0020The instruction requested  is then transferred to the\n CPU through the data bus. Initially, the MBR will be the\n register containing the instruction, because it stores the\n data or instructions as soon as they come from memory.
atualizarpcproxinstrucaotxt = \u0020The PC value is updated to contain the value\n of the next instruction.
naohaproxinstrucaotxt=\u0020Since there is no next instruction to be\n executed, the PC value is not altered.
copiarmbrparairtxt=\u0020The instruction, that is in the MBR, is copied\n to the IR, the instruction register.
#messages of the execution cycle
transferirirmbrtxt=\u0020The value contained on the second operand of the IR is copied to the MBR, \n for in the next, be transferred to the memory.
copiarvalormarbarramentoexecucaotxt=\u0020The MAR value is transferred to the addresses bus.
transferirirmartxt=\u0020The address reference to where the data will be transferred is copied to the MAR.
copiarvalormbrbarramentoexecucaotxt=\u0020The MBR value, that corresponds to the data to be written in the memory, is transferred to the data bus.
copiarwritebarramentotxt=\u0020The "WRITE" instruction is copied from the CU to the instructions bus.
moverdadosbarramentomemoriaescritatxt=\u0020The data contained in the bus is then transferred to the memory.
moverdadomemoriatxt=\u0020The data is then written in the memory at the address requested by the CPU.
moverdadoregistradortxt=\u0020The data, relative to the second operand of the instruction in the IR, is copied to the register specified on the first operand.
moverreferenciaindiretaregistradorirtxt=\u0020The register value referenced on the first operand of the IR is transferred to this operand.
transferirirmar2txt=\u0020The second IR operand, that contains the reference of the data to be searched in the memory, is transferred to the MAR.
copiarreadbarramentoexecucaotxt=\u0020The "READ" value is copied from the CU to the instructions bus.
moverdadosbarramentomemorialeituratxt=\u0020The data of the reading data request contained at the address specified is moved\n to the memory through the bus.
transferirdadoleiturabarramentotxt=\u0020The data read from memory is then transferred to the CPU through the data bus.
transferirmbrparairexecucaotxt=\u0020The value contained in the MBR, that corresponds to the data searched from the memory, is transferred to the second operand of the IR.
moverdadoregistradorirtxt=\u0020The value contained in the register referenced on the second operand of the IR is transferred to this operand.
fimexecucaotxt=\u0020The execution of this instruction has finished.
transferirirmar1txt=\u0020The first IR operand, that contains the reference to the data to be searched in the memory, is transferred to the MAR.
transferirmbrirulatxt=\u0020The value contained in the MBR and the second operand of the IR are transferred to the ALU.
efetuaroperacaoaritmeticatxt=\u0020The arithmetic operation with the data is then realized.
transferirulambrtxt=\u0020The result of the operation is transferred to the MBR, to be written in the memory.
transferirregistradorirulatxt=\u0020The data contained in the register and what is contained on the second operand of the IR are transferred to the ALU.
moverdadoularegistradortxt=\u0020The result of the operation is then transferred to the register.
transferirmbrregistradorulatxt=\u0020The data contained in the register and what is in the MBR, are then copied to the ALU.
transferirregregulatxt=\u0020The data contained in the two registers specified on the operands 1 and 2 of the IR are copied to the ALU.
transferirirmarwritetxt=\u0020The first operand of the IR, that is the reference to where the result of the operation\n will be written in the memory, is copied to the MAR.
#messages of the indirect cycle
verificarirtxt=\u0020The control unit examines the IR content to determine\n if it contains an operand specifier that uses\n indirect addressing.
transferiroperandomartxt=\u0020operand makes an indirect reference to a data in the memory.\n In this case, the bits in the IR that make this reference are transferred to the MAR.
transferiroperandomartxtnaoha=\u0020There are no operands in this instruction that make indirect reference to the memory.
copiarreadbarramentoindtxt=\u0020The "READ" command is transferred to the addresses bus to start the reading of the indirect cycle.
copiarvalormarbarramentoindtxt=\u0020The MAR value, that corresponds to the indirect address, is transferred to the addresses bus.
moverdadosbarramentomemoriaindtxt=\u0020The data contained in the bus are then moved to the memory,\n requesting the address contained at the address that is in the bus.
transferirdadoreferenciaindiretabarramentotxt=\u0020The address that contains the data and that is referenced indirectly by the reference\n in the MAR is transferred to the CPU by the data bus.
transferirmbrparairtxt=\u0020The field of address related to the operand that makes the indirect reference\n is updated to contain the value that it references, or be, the address\n that contains the data.
oprimeiro=\u0020The first
osegundo=\u0020The second
#final message
naohamaisinstrucoestxt=\u0020There aren't no more instructions to be executed. To execute more instructions, insert them.
#Other Simulators Window
outrossimuladores=Other Simulators
irpara=Go