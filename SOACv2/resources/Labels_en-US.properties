#title
soac=SOAC - Organization and Computer Architecture Simulator
#menus
inserir=Insert
instrucoes=Instructions
variavel=Variable
mensagem=Message
conteudodefaultmensagem=There is no message
conteudodefaultvariaveis=There are no variables
variaveis=Variables
janela=Window
mensagens=Messages
exibir=Show
esconder=Hide
naoexibir=Not Show
exibirmenssimulacao=Show Simulation Messages
outros=Others
sied=SIED - Integrated Simulators of Data Structures
sin=SIN - Integrated Simulators of Operating Systems
ajuda=Help
sobre=About
idioma=Language
portugues=Portuguese
ingles=English
#circles
clique=\u0020\u0020\u0020\u0020Click to expand
computador=\u0020\u0020\u0020COMPUTER
es=Input/Output
memoriaprincipal=\u0020\u0020Main Memory
sistemainterconexao=Interconnection System
ucp=Central Processing\n            Unit
dados=Data
ucpabrev=CPU
registradores=Registers
ula=Arithmetic and\n Logic Unit
barramentoint=\u0020\u0020\u0020\u0020\u0020\u0020Internal Bus
uc=\u0020\u0020\u0020\u0020\u0020\u0020\u0020Control Unit
barramento=\u0020\u0020\u0020\u0020\u0020\u0020Bus
moduloes=\u0020\u0020\u0020I/O Module
legiveishumano=Human\n Readable
legiveismaquina=Machine\n Readable
comunicacaodisprem=\u0020\u0020\u0020Communication\n     with Remote\n        Devices
#Insert Instructions Window
erro=Error
aviso=Message
avisoidioma=The language change will only take effect after restarting
inseririnstrucoes=Insert Instructions
tipo=Type:
operando1=\u0020Operand 1
operando2=\u0020\u0020Operand 2
modoenderecamento=Addressing mode:\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020
valor=Value:
imediato=Immediate
direto=Direct
indireto=Indirect
registrador=Register
indiretoregistrador=Indirect of Register
inserirseta=Insert>>
removerselecionada=Remove Selected
iniciarsimulacao=Start Simulation
informeoperando1=Please, specify a value for the operand 1
informeoperando2=Please, specify a value for the operand 2
modoop1naopodeimediato=The Addressing mode of the operand 1 cannot be immediate
valorvarop1naoexiste=The variable with the value specified for the operand 1 does not exist
valorvarop1ehponteiro=The variable with the value specified for the operand 1 is a pointer
valorvarop1naoehponteiro=The variable with the value specified for the operand 1 is not a pointer
registradorvalorop1naoexiste=The register with the value specified for the operand 1 does not exist
registradornaocontemendmemoria=The register specified does not contain a memory address
valorop2precisaserintoufloat=The value specified for the operand 2 needs to be an integer or floating point
valorvarop2naoexiste=The variable with the value specified for the operand 2 does not exist
valorvarop2ehponteiro=The variable with the value specified for the operand 2 is a pointer
valorvarop2naoehponteiro=The variable with the value specified for the operand 2 is not a pointer
registradorvalorop2naoexiste=The register with the value specified for the operand 2 does not exist
#Insert Variables Window
inserirvariavel=Insert Variable
identificador=Identifier [A-Z]:
inteiro=Integer
pontoflutuante=Floating point
valorinicial=Initial value:
normal=Normal
ponteiro=Pointer
identificadorabrev=ID
enderecoabrev=ADDR
informeidentificador=Please, specify an identifier
informevalor=Please, specify a value
identificadorinvalido=is not a valid identifier
valornaoehinteiro=The value specified is not an integer number
valornaoehfloat=The value specified is not a floating point number
ponteirosoharmazenainteiros=A pointer can only store integer values
naohavariavelcomendereco=There is no variable with the specified address
ponteironaoreferenciaponteiro=It is not possible, in this simulator, a pointer referencing another pointer
#internal components
r=R
pc=PC
mar=MAR
mbr=MBR
ir=IR
ioar=I/O AR
iobr=I/O BR
ulaabrev=ALU
ucabrev=CU
endereco=Address
opcode=Opcode
instrucoesmin=instructions
enderecosmin=addresses
dadosmin=data
dado=Data
memoriaseminst=The Memory contains no instructions to be executed
memoriasemdados=The Memory contains no data
#explanatory messages
computadornaoxpandido=\u0020This circle represents a computer.\n Click in this circle to see its internal\n components and start the simulation.
computadorexpandido=\u0020This circle represents a computer with its main\n components represented by circles. To see details\n of each of them and start the simulation with them\n involved, click in the circle which represent them.
memoriaprincipaltxt=\u0020This circle represents a main memory.\n The main memory can store both instructions\n and data. To visualize the organization of the\n main memory with more details, click in this circle.
entradasaidatxt=\u0020This circle represents the input/output devices, which can be divided into three categories:\n 1 - Human readable: suitable for the communication with computer users. Examples: video monitors and printers.\n 2 - Machine readable: suitable for the communication with hardware equipments. Examples: magnetic disks, sensors and actuators.\n 3 - Communication: suitable for the communication with remote devices. Examples: terminal, network adapter and other computer.
ucptxt=\u0020This circle represents a CPU (Central Processing Unit).\n A CPU is constituted by registers, arithmetic and logic unit,\n internal bus and control unit. To see more details about\n each of these components, click with the mouse.
memoriainternatxt=\u0020The main memory is represented here by two tables:\n one that stores instructions and other that stores data.\n In the instructions table, the columns are the following: \n - Address: The memory address that the instruction occupies\n - Opcode: A code that identifies the type of the instruction,\n   related with the operands 1 and 2.\n - Operands 1 and 2: Numbers that identify the memory\n   address of a data, a data or one of the CPU registers,\n   depending of the addressing mode of these operands.\n Each line of the data table contains what the programmers\n define as variables. This table have two columns, in the first,\n the address of an inserted variable is contained and in the\n second, the data that this variable stores.
registradorestxt = \u0020The registers store data and references to the memory.\n The access time to the registers is much faster, if\n compared to the access time of the main memory.
pctxt = \u0020The PC (Program Counter) stores the value\n of the next instruction to be executed, for when\n a instruction finishes its execution, the CPU knows\n what will be the next instruction that it will have to\n execute.
martxt=\u0020The MAR (Memory Address Register) is responsible\n for storing the references of memory addresses that\n will be transferred to the address bus in a reading\n of a data or instruction of the main memory.
mbrtxt=\u0020The MBR (Memory Buffer Register) is responsible\n for storing the data that will be written in the main\n memory by the data bus and for receiving the data\n or memory instructions in a reading operation,\n through this same bus.
irtxt=\u0020The IR (Instruction Register) is responsible\n for storing the instructions that come from memory.
ulatxt=\u0020The ALU (Arithmetic and Logic Unit) is the\n responsible for executing the logical and arithmetic\n operations, such as additions, subtractions,\n multiplications and divisions.
uctxt=\u0020The CU (Control Unit) coordinates the CPU\n activities. It sends the instructions of reading\n data or instructions of writing data to the\n instructions bus. Moreover, it is responsible\n for sending instructions that will realize internal\n operations in the CPU, as updating the PC,\n realizing arithmetic operations and transferring\n data between components of the CPU by\n its internal bus.
barramentotxt=\u0020This component is part of the interconnection\n system. To see more details about one of these\n components, click in the circle \"Bus\" or \"I/O Module\".
barramentointernotxt=\u0020The bus is where the data or instructions\n of the main memory flow to the CPU or vice\n versa. It is constituted by three sub-buses:\n the instructions bus, the addresses bus and\n the data bus where flow CU instructions,\n memory addresses and data, respectively.